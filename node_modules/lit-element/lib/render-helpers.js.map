{"version":3,"file":"render-helpers.js","sourceRoot":"","sources":["../src/lib/render-helpers.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;GAYG;AAEH;;;;;GAKG;AACH,MAAM,UAAU,WAAW,CACvB,SAAkD;IACpD,MAAM,CAAC,GAAG,EAAE,CAAC;IACb,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;QAC5B,uDAAuD;QACvD,sDAAsD;QACtD,IAAI,SAAS,CAAC,IAAI,CAAC,EAAE;YACnB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACd;KACF;IACD,OAAO,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,CAAC;AAED;;;;;;;GAOG;AACH,MAAM,UAAU,WAAW,CACvB,SAAkD;IACpD,MAAM,CAAC,GAAG,EAAE,CAAC;IACb,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;QAC5B,MAAM,CAAC,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YAChB,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;SACjE;KACF;IACD,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtB,CAAC","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * Returns a string of CSS class names formed by taking the properties\n * in the `classInfo` object and appending the property name to the string of\n * class names if the property value is truthy.\n * @param classInfo\n */\nexport function classString(\n    classInfo: {[name: string]: string|boolean|number}) {\n  const o = [];\n  for (const name in classInfo) {\n    // We explicitly want a loose truthy check here because\n    // it seems more convenient that '' and 0 are skipped.\n    if (classInfo[name]) {\n      o.push(name);\n    }\n  }\n  return o.join(' ');\n}\n\n/**\n * Returns a CSS style string formed from the `styleInfo` object. Property names\n * are automatically converted from *camelCase* to *dash-case*, so that you can use\n * unquoted names like `backgroundColor`. The property values are formatted\n * as css. For example `{backgroundColor: 'red', borderTop: '5px'}` becomes\n * `background-color: red; border-top: 5px;`.\n * @param styleInfo\n */\nexport function styleString(\n    styleInfo: {[name: string]: string|boolean|number}) {\n  const o = [];\n  for (const name in styleInfo) {\n    const v = styleInfo[name];\n    if (v || v === 0) {\n      o.push(`${name.replace(/([A-Z])/, '-$1').toLowerCase()}: ${v}`);\n    }\n  }\n  return o.join('; ');\n}\n"]}