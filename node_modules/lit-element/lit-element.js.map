{"version":3,"file":"lit-element.js","sourceRoot":"","sources":["src/lit-element.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport {render, ShadyRenderOptions} from 'lit-html/lib/shady-render.js';\n\nimport {PropertyValues, UpdatingElement} from './lib/updating-element.js';\n\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport {html, svg, TemplateResult, SVGTemplateResult} from 'lit-html/lit-html.js';\nimport {supportsAdoptingStyleSheets, CSSResult} from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n\ndeclare global {\n  interface Window {\n    litElementVersions: string[];\n  }\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.3.1');\n\nexport interface CSSResultArray extends Array<CSSResult|CSSResultArray> {}\n\n/**\n * Sentinal value used to avoid calling lit-html's render function when\n * subclasses do not implement `render`\n */\nconst renderNotImplemented = {};\n\nexport class LitElement extends UpdatingElement {\n  /**\n   * Ensure this class is marked as `finalized` as an optimization ensuring\n   * it will not needlessly try to `finalize`.\n   *\n   * Note this property name is a string to prevent breaking Closure JS Compiler\n   * optimizations. See updating-element.ts for more information.\n   */\n  protected static['finalized'] = true;\n\n  /**\n   * Render method used to render the value to the element's DOM.\n   * @param result The value to render.\n   * @param container Node into which to render.\n   * @param options Element name.\n   * @nocollapse\n   */\n  static render:\n      (result: unknown, container: Element|DocumentFragment,\n       options: ShadyRenderOptions) => void = render;\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the `css` tag function.\n   */\n  static styles?: CSSResult|CSSResultArray;\n\n  private static _styles: CSSResult[]|undefined;\n\n  /**\n   * Return the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * @nocollapse\n   */\n  static getStyles(): CSSResult|CSSResultArray|undefined {\n    return this.styles;\n  }\n\n  /** @nocollapse */\n  private static _getUniqueStyles() {\n    // Only gather styles once per class\n    if (this.hasOwnProperty(JSCompiler_renameProperty('_styles', this))) {\n      return;\n    }\n    // Take care not to call `this.getStyles()` multiple times since this\n    // generates new CSSResults each time.\n    // TODO(sorvell): Since we do not cache CSSResults by input, any\n    // shared styles will generate new stylesheet objects, which is wasteful.\n    // This should be addressed when a browser ships constructable\n    // stylesheets.\n    const userStyles = this.getStyles();\n    if (userStyles === undefined) {\n      this._styles = [];\n    } else if (Array.isArray(userStyles)) {\n      // De-duplicate styles preserving the _last_ instance in the set.\n      // This is a performance optimization to avoid duplicated styles that can\n      // occur especially when composing via subclassing.\n      // The last item is kept to try to preserve the cascade order with the\n      // assumption that it's most important that last added styles override\n      // previous styles.\n      const addStyles =\n          (styles: CSSResultArray, set: Set<CSSResult>): Set<CSSResult> =>\n              styles.reduceRight(\n                  (set: Set<CSSResult>, s) =>\n                      // Note: On IE set.add() does not return the set\n                  Array.isArray(s) ? addStyles(s, set) : (set.add(s), set),\n                  set);\n      // Array.from does not work on Set in IE, otherwise return\n      // Array.from(addStyles(userStyles, new Set<CSSResult>())).reverse()\n      const set = addStyles(userStyles, new Set<CSSResult>());\n      const styles: CSSResult[] = [];\n      set.forEach((v) => styles.unshift(v));\n      this._styles = styles;\n    } else {\n      this._styles = [userStyles];\n    }\n  }\n\n  private _needsShimAdoptedStyleSheets?: boolean;\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   */\n  readonly renderRoot!: Element|DocumentFragment;\n\n  /**\n   * Performs element initialization. By default this calls `createRenderRoot`\n   * to create the element `renderRoot` node and captures any pre-set values for\n   * registered properties.\n   */\n  protected initialize() {\n    super.initialize();\n    (this.constructor as typeof LitElement)._getUniqueStyles();\n    (this as {renderRoot: Element | DocumentFragment}).renderRoot =\n        this.createRenderRoot();\n    // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n    // element's getRootNode(). While this could be done, we're choosing not to\n    // support this now since it would require different logic around de-duping.\n    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n      this.adoptStyles();\n    }\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   * @returns {Element|DocumentFragment} Returns a node into which to render.\n   */\n  protected createRenderRoot(): Element|ShadowRoot {\n    return this.attachShadow({mode: 'open'});\n  }\n\n  /**\n   * Applies styling to the element shadowRoot using the `static get styles`\n   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n   * available and will fallback otherwise. When Shadow DOM is polyfilled,\n   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n   * is available but `adoptedStyleSheets` is not, styles are appended to the\n   * end of the `shadowRoot` to [mimic spec\n   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n   */\n  protected adoptStyles() {\n    const styles = (this.constructor as typeof LitElement)._styles!;\n    if (styles.length === 0) {\n      return;\n    }\n    // There are three separate cases here based on Shadow DOM support.\n    // (1) shadowRoot polyfilled: use ShadyCSS\n    // (2) shadowRoot.adoptedStyleSheets available: use it.\n    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n    // rendering\n    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n      window.ShadyCSS.ScopingShim!.prepareAdoptedCssText(\n          styles.map((s) => s.cssText), this.localName);\n    } else if (supportsAdoptingStyleSheets) {\n      (this.renderRoot as ShadowRoot).adoptedStyleSheets =\n          styles.map((s) => s.styleSheet!);\n    } else {\n      // This must be done after rendering so the actual style insertion is done\n      // in `update`.\n      this._needsShimAdoptedStyleSheets = true;\n    }\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // Note, first update/render handles styleElement so we only call this if\n    // connected after first update.\n    if (this.hasUpdated && window.ShadyCSS !== undefined) {\n      window.ShadyCSS.styleElement(this);\n    }\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes\n   * and calls `render` to render DOM via lit-html. Setting properties inside\n   * this method will *not* trigger another update.\n   * @param _changedProperties Map of changed properties with old values\n   */\n  protected update(changedProperties: PropertyValues) {\n    // Setting properties in `render` should not trigger an update. Since\n    // updates are allowed after super.update, it's important to call `render`\n    // before that.\n    const templateResult = this.render();\n    super.update(changedProperties);\n    // If render is not implemented by the component, don't call lit-html render\n    if (templateResult !== renderNotImplemented) {\n      (this.constructor as typeof LitElement)\n          .render(\n              templateResult,\n              this.renderRoot,\n              {scopeName: this.localName, eventContext: this});\n    }\n    // When native Shadow DOM is used but adoptedStyles are not supported,\n    // insert styling after rendering to ensure adoptedStyles have highest\n    // priority.\n    if (this._needsShimAdoptedStyleSheets) {\n      this._needsShimAdoptedStyleSheets = false;\n      (this.constructor as typeof LitElement)._styles!.forEach((s) => {\n        const style = document.createElement('style');\n        style.textContent = s.cssText;\n        this.renderRoot.appendChild(style);\n      });\n    }\n  }\n\n  /**\n   * Invoked on each update to perform rendering tasks. This method may return\n   * any value renderable by lit-html's NodePart - typically a TemplateResult.\n   * Setting properties inside this method will *not* trigger the element to\n   * update.\n   */\n  protected render(): unknown {\n    return renderNotImplemented;\n  }\n}\n"]}